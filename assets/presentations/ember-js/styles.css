* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing:    border-box;
  -ms-box-sizing:     border-box;
  -o-box-sizing:      border-box;
  box-sizing:         border-box;
}

body, button, input, select, textarea {
	font-family: 'PT Sans', sans-serif;
}

body {
    line-height: 1.5;
    color: #333;
    text-shadow: 0 2px 2px rgba(0, 0, 0, .1);
    min-height: 740px;
/*
    background: #e1e1e1;
    background: -webkit-gradient(radial, 50% 50%, 0, 50% 50%, 500, from(rgb(240, 240, 240)), to(rgb(190, 190, 190)));
    background: -webkit-radial-gradient(rgb(250, 250, 250), rgb(220, 220, 220));
    background:    -moz-radial-gradient(rgb(250, 250, 250), rgb(220, 220, 220));
    background:     -ms-radial-gradient(rgb(250, 250, 250), rgb(220, 220, 220));
    background:      -o-radial-gradient(rgb(250, 250, 250), rgb(220, 220, 220));
    background:         radial-gradient(rgb(250, 250, 250), rgb(220, 220, 220));
*/
/* use below for projector to have better contrast */
/*
    background: rgb(215, 215, 215);
    background: -webkit-gradient(radial, 50% 50%, 0, 50% 50%, 500, from(rgb(240, 240, 240)), to(rgb(190, 190, 190)));
    background: -webkit-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:    -moz-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:     -ms-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:      -o-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
    background:         radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
*/
    background-color: #f7f3de;
    background: -moz-radial-gradient(center, circle cover, #fff 0%, #f7f2d3 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, #fff), color-stop(100%, #f7f2d3));
    background: -webkit-radial-gradient(center, circle cover, #fff 0%, #f7f2d3 100%);
    background: -o-radial-gradient(center, circle cover, #fff 0%, #f7f2d3 100%);
    background: radial-gradient(center, circle cover, #fff 0%, #f7f2d3 100%);
    -webkit-transition: background 1s;
    -moz-transition:    background 1s;
    -ms-transition:     background 1s;
    -o-transition:      background 1s;
    transition:         background 1s;
}

h1, h2, h3, h4, h5, h6 {
  line-height: 1.2;
  margin: 0;
}

h1 {
  font-size: 68px;
}

/*
    ... and give links a nice look.
*/
a {
    color: inherit;
    text-decoration: none;
    -webkit-transition: 0.5s;
    -moz-transition:    0.5s;
    -ms-transition:     0.5s;
    -o-transition:      0.5s;
    transition:         0.5s;
}

a:hover,
a:focus {
    background: rgba(255,255,255,1);
    text-shadow: -1px -1px 2px rgba(100,100,100,0.5);
}

pre, code {
  background-color: #fff;
  border: 1px solid #d9d9d9;
  border-radius: 3px;
  font-family: 'PT Serif', georgia, serif;
  padding: 0 5px;
}

pre {
  line-height: 1.1;
  padding: 10px;
}

pre code {
  background-color: transparent;
  border: none;
  border-radius: 0;
  font-size: 38px;
  padding: 0;
}

.muted {
  color: #999;
}

.block-list, .columnar {
  list-style: none;
  padding-left: 0;
}

.columnar li {
  display: inline-block;
  vertical-align: top;
  width: 420px;
}

.nav {
  font-size: 0;
  list-style: none;
  margin: 0;
  padding: 0;
}

.nav li, .nav a {
  display: inline-block;
  font-size: 48px;
}

.nav-divided > li + li:before {
  content: "\2022"; /* same as &#8226; in HTML (converter: http://www.evotech.net/articles/testjsentities.html) */
  margin: 0 20px;
}

/*
    Because the main point behind the impress.js demo is to demo impress.js
    we display a fallback message for users with browsers that don't support
    all the features required by it.

    All of the content will be still fully accessible for them, but I want
    them to know that they are missing something - that's what the demo is
    about, isn't it?

    And then we hide the message, when support is detected in the browser.
*/

.fallback-message {
    font-family: sans-serif;
    line-height: 1.3;

    width: 780px;
    padding: 10px 10px 0;
    margin: 20px auto;

    border: 1px solid #E4C652;
    border-radius: 10px;
    background: #EEDC94;
}

.fallback-message p {
    margin-bottom: 10px;
}

.impress-supported .fallback-message {
    display: none;
}

/*
    Now let's style the presentation steps.

    We start with basics to make sure it displays correctly in everywhere ...
*/

.step {
    position: relative;
    width: 900px;
    margin: 20px auto;
    font-family: 'PT Serif', georgia, serif;
    font-size: 48px;
    line-height: 1.5;
    text-align: center;
}

/*
    ... and we enhance the styles for impress.js.

    Basically we remove the margin and make inactive steps a little bit transparent.
*/
.impress-enabled .step {
    margin: 0;
    opacity: 0.3;

    -webkit-transition: opacity 1s;
    -moz-transition:    opacity 1s;
    -ms-transition:     opacity 1s;
    -o-transition:      opacity 1s;
    transition:         opacity 1s;
}

.impress-enabled .step.active {
  opacity: 1;
  z-index: 10;
}

#pseudo-class-link .element {
  opacity: 0;
  -webkit-transition: opacity 1s ease 5s;
  -moz-transition:    opacity 1s ease 5s;
  -ms-transition:     opacity 1s ease 5s;
  -o-transition:      opacity 1s ease 5s;
  transition:         opacity 1s ease 5s;
}

#pseudo-class-link.active .element {
  opacity: 1;
}

.impress-on-modal-example {
  background-color: rgba(0, 0, 0, 0.5);
  background-image: none;
}

/*
    The last step is an overview.
    There is no content in it, so we make sure it's not visible because we want
    to be able to click on other steps.

*/
#overview { display: none }

/*
    We also make other steps visible and give them a pointer cursor using the
    `impress-on-` class.
*/
.impress-on-overview .step {
    opacity: 1;
    cursor: pointer;
}

/*
    And as the last thing there is a workaround for quite strange bug.
    It happens a lot in Chrome. I don't remember if I've seen it in Firefox.

    Sometimes the element positioned in 3D (especially when it's moved back
    along Z axis) is not clickable, because it falls 'behind' the <body>
    element.

    To prevent this, I decided to make <body> non clickable by setting
    pointer-events property to `none` value.
    Value if this property is inherited, so to make everything else clickable
    I bring it back on the #impress element.

    If you want to know more about `pointer-events` here are some docs:
    https://developer.mozilla.org/en/CSS/pointer-events

    There is one very important thing to notice about this workaround - it makes
    everything 'unclickable' except what's in #impress element.

    So use it wisely ... or don't use at all.
*/
.impress-enabled          { pointer-events: none }
.impress-enabled #impress { pointer-events: auto }

.left-align, ol, ul {
  text-align: left;
}
